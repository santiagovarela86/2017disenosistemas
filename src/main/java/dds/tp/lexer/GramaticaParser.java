/* Generated By:JavaCC: Do not edit this line. GramaticaParser.java */
package dds.tp.lexer;
import dds.tp.evaluador.EvaluadorIndicador;
import dds.tp.calculador.*;
import dds.tp.excepciones.*;

public class GramaticaParser implements GramaticaParserConstants {
  public static void main(String args []) throws ParseException
  {
    GramaticaParser parser = new GramaticaParser(System.in);
        parser.Input();
  }

//No la usamos pero si lo saco tira error
//Ver como solucionarlo
  final public void Input() throws ParseException {
    jj_consume_token(NUMERO);
  }

//Este es para validar la expresion y poder guardarla si esta ok
  final public void analizarSintacticamente() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INDICADOR:
      jj_consume_token(INDICADOR);
      break;
    case CUENTA:
      jj_consume_token(CUENTA);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
      case MENOS:
      case POR:
      case DIV:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        jj_consume_token(MAS);
        break;
      case MENOS:
        jj_consume_token(MENOS);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      case POR:
        jj_consume_token(POR);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INDICADOR:
        jj_consume_token(INDICADOR);
        break;
      case CUENTA:
        jj_consume_token(CUENTA);
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

//-----------------------------------------------------
//Esto es para calcular el indicador
  final public float evaluar(EvaluadorIndicador ev) throws ParseException, CuentaNotFound, IndicadorNotFound {
        float valor;
        float i;
    valor = termino(ev);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
      case MENOS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        jj_consume_token(MAS);
        i = termino(ev);
                  valor += i;
        break;
      case MENOS:
        jj_consume_token(MENOS);
        i = termino(ev);
                  valor -= i;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
         {if (true) return valor;}
    throw new Error("Missing return statement in function");
  }

  final public float termino(EvaluadorIndicador ev) throws ParseException, CuentaNotFound, IndicadorNotFound {
  float valor;
  float i;
    valor = getValor(ev);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
      case DIV:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
        jj_consume_token(POR);
        i = getValor(ev);
                 valor *= i;
        break;
      case DIV:
        jj_consume_token(DIV);
        i = getValor(ev);
                 valor /= i;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return valor;}
    throw new Error("Missing return statement in function");
  }

  final public float getValor(EvaluadorIndicador ev) throws ParseException, CuentaNotFound, IndicadorNotFound {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      t = jj_consume_token(NUMERO);
    {if (true) return Float.parseFloat(t.image);}
      break;
    case CUENTA:
      t = jj_consume_token(CUENTA);
    {if (true) return ev.getCuentaValor(t.image);}
      break;
    case INDICADOR:
      t = jj_consume_token(INDICADOR);
    {if (true) return ev.getValorIndicador(t.image);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//-----------------------
//-----------------------
//Con Abstracciones propias
  final public Termino aevaluar(EvaluadorIndicador ev) throws ParseException, CuentaNotFound, IndicadorNotFound {
        Termino term;
        Termino i;
    term = atermino(ev);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
      case MENOS:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        jj_consume_token(MAS);
        i = atermino(ev);
                 term.addOperacion (new Suma(i));
        break;
      case MENOS:
        jj_consume_token(MENOS);
        i = atermino(ev);
                 term.addOperacion (new Resta(i));
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
         {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public Termino atermino(EvaluadorIndicador ev) throws ParseException, CuentaNotFound, IndicadorNotFound {
  Termino term;
  float i;
    i = getValor(ev);
         term = new Termino(new Numero(i));
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
      case DIV:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
        jj_consume_token(POR);
        i = getValor(ev);
                 term.addOperacion(new Multiplicacion(new Numero(i)));
        break;
      case DIV:
        jj_consume_token(DIV);
        i = getValor(ev);
                 term.addOperacion(new Divicion(new Numero(i)));
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public GramaticaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10c,0xf0,0xf0,0x10c,0x30,0x30,0xc0,0xc0,0x10c,0x30,0x30,0xc0,0xc0,};
   }

  /** Constructor with InputStream. */
  public GramaticaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GramaticaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GramaticaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GramaticaParser(GramaticaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GramaticaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[10];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 10; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
